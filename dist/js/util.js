// Generated by CoffeeScript 1.6.3
(function() {
  var root;

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.util = {
    getFromLocalStorage: function(key) {
      var value;
      value = localStorage[key];
      if (value) {
        return JSON.parse(value);
      }
      return null;
    },
    putInLocalStorage: function(key, value) {
      return localStorage[key] = JSON.stringify(value);
    },
    defaultResponse: function(sendResponse) {
      return sendResponse({
        OK: true
      });
    },
    isBlank: function(str) {
      return !str || /^\s*$/.test(str);
    },
    convertToBackboneArr: function(Model, arr) {
      return _.map(arr, function(item) {
        return new Model(item);
      });
    },
    generateTwitterUsers: function(opt) {
      var cb, evt, twitterUsers, _ref;
      if (opt == null) {
        opt = {};
      }
      if (opt.events == null) {
        opt.events = {};
      }
      twitterUsers = new root.models.TwitterUsers();
      _ref = opt.events;
      for (evt in _ref) {
        cb = _ref[evt];
        twitterUsers.on(evt, cb);
      }
      twitterUsers.add(util.convertToBackboneArr(root.models.TwitterUser, opt.users));
      twitterUsers.on('change reset add remove', function(__, collection) {
        return chrome.extension.sendMessage({
          filteredUsers: collection.toJSON()
        });
      });
      return twitterUsers;
    }
  };

  root.models = {
    TwitterUser: Backbone.Model.extend({
      initialize: function() {
        return this.set({
          screenName: this.get('screenName').toLowerCase()
        });
      }
    }),
    TwitterUsers: Backbone.Collection.extend({
      model: this.TwitterUser,
      add: function(twitterUser) {
        if (this.any(function(_twitterUser) {
          return _twitterUser.get('screenName') === twitterUser.get('screenName');
        })) {
          return false;
        }
        return Backbone.Collection.prototype.add.apply(this, arguments);
      }
    })
  };

}).call(this);
