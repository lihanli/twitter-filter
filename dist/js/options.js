// Generated by CoffeeScript 1.6.3
(function() {
  var dom, showSettingsSaved;

  dom = {
    filteredUsersInput: $('.filtered-users-input'),
    filteredUsers: $('.filtered-users'),
    hideCompletelyInput: $('.hide-completely-input'),
    alertsBox: $('.alerts-box'),
    optionsBox: $('.options-box'),
    enableInput: $('.enable-input'),
    filteredPhrases: $('.filtered-phrases'),
    filteredPhrasesInput: $('.filtered-phrases-input'),
    hideMentionsInput: $('.hide-mentions-input')
  };

  showSettingsSaved = function() {
    var alertEl;
    alertEl = $("<div class=\"alert alert-success\">\n  <span class=\"glyphicon glyphicon-ok\"></span> Settings have been saved, reload page to see changes.\n</div>");
    dom.alertsBox.html(alertEl);
    util.highlight(alertEl);
    return alertEl.delay(5000).fadeOut('slow');
  };

  _.each({
    filteredUsers: {
      template: function(screenNameEscaped) {
        return "<span class='screen-name'>@" + screenNameEscaped + "</span>";
      },
      defaultAttr: 'screenName'
    },
    filteredPhrases: {
      defaultAttr: 'phrase'
    }
  }, function(opt, dataName) {
    var req;
    req = {};
    req[dataName] = null;
    return chrome.extension.sendMessage(req, function(res) {
      var $collectionEl, collection, dataNameCapitalized;
      $collectionEl = dom[dataName];
      dataNameCapitalized = util.capitalize(dataName);
      collection = models.generateCollection({
        collectionName: dataNameCapitalized,
        data: res[dataName],
        anyChangeCb: showSettingsSaved,
        events: {
          add: function(item) {
            var attrEscaped, el, template;
            attrEscaped = _.escape(item.get(opt.defaultAttr));
            template = opt.template ? opt.template(attrEscaped) : attrEscaped;
            el = $("<li>\n  " + template + "\n  <a class=\"close\">&times;</a>\n</li>").data('model', item);
            return $collectionEl.append(el);
          },
          remove: function(__, ___, opt) {
            return $($collectionEl.find('li')[opt.index]).remove();
          }
        }
      });
      $collectionEl.on('click', '.close', function() {
        var el;
        el = $(this).parents('li');
        return collection.remove(el.data('model'));
      });
      return (function() {
        var $inputEl;
        $inputEl = dom["" + dataName + "Input"];
        return util.inputHandler($inputEl, function() {
          var item;
          item = models.generateModelWithSanitizer({
            Model: models[dataNameCapitalized].prototype.model,
            attr: opt.defaultAttr
          });
          item.set(opt.defaultAttr, $inputEl.val());
          if (!item.isValid()) {
            return;
          }
          return collection.add(item);
        });
      })();
    });
  });

  chrome.extension.sendMessage({
    options: null
  }, function(res) {
    var checkBoxes, options;
    options = new models.Options(res.options);
    checkBoxes = {
      hideCompletely: null,
      enable: function(val) {
        return dom.optionsBox[val ? 'show' : 'hide']();
      },
      hideMentions: null
    };
    _.each(checkBoxes, function(cb, attr) {
      var $el;
      $el = dom["" + attr + "Input"];
      options.on("renderAll change:" + attr, function() {
        var val;
        val = this.get(attr);
        $el.prop('checked', val);
        if (cb) {
          return cb(val);
        }
      });
      return $el.change(function() {
        return options.set(attr, $el.prop('checked'));
      });
    });
    options.trigger('renderAll');
    return options.on('change', function() {
      util.saveToBg('options', options);
      return showSettingsSaved();
    });
  });

  $('[data-toggle="tooltip"]').tooltip();

}).call(this);
