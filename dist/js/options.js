// Generated by CoffeeScript 1.6.3
(function() {
  var dom, showSettingsSaved;

  dom = {
    filteredUserInput: $('.filtered-user-input'),
    filteredUsers: $('.filtered-users'),
    hideCompletelyInput: $('.hide-completely-input'),
    alertsBox: $('.alerts-box'),
    optionsBox: $('.options-box'),
    enableInput: $('.enable-input'),
    filteredText: $('.filtered-text'),
    filteredTextInput: $('.filtered-text-input')
  };

  showSettingsSaved = function() {
    var alertEl;
    alertEl = $("<div class=\"alert alert-success\">\n  <span class=\"glyphicon glyphicon-ok\"></span> Settings have been saved, reload page to see changes.\n</div>");
    dom.alertsBox.html(alertEl);
    util.highlight(alertEl);
    return alertEl.delay(5000).fadeOut('slow');
  };

  chrome.extension.sendMessage({
    filteredPhrases: null
  }, function(res) {
    var filteredPhrases;
    filteredPhrases = models.generateCollection({
      collectionName: 'FilteredPhrases',
      data: res.filteredPhrases,
      anyChangeCb: showSettingsSaved,
      events: {
        add: function(filteredPhrase) {
          var el;
          el = $("<li>\n  " + (_.escape(filteredPhrase.get('phrase'))) + "\n  <a class=\"close\">&times;</a>\n</li>").data('model', filteredPhrase);
          return dom.filteredText.append(el);
        },
        remove: function(__, ___, opt) {
          return $(dom.filteredText.find('li')[opt.index]).remove();
        }
      }
    });
    dom.filteredText.on('click', '.close', function() {
      var el;
      el = $(this).parents('li');
      return filteredPhrases.remove(el.data('model'));
    });
    return util.inputHandler(dom.filteredTextInput, function() {
      var filteredPhrase;
      filteredPhrase = new models.FilteredPhrase({
        phrase: dom.filteredTextInput.val()
      });
      if (!filteredPhrase.isValid()) {
        return;
      }
      return filteredPhrases.add(filteredPhrase);
    });
  });

  chrome.extension.sendMessage({
    filteredUsers: null
  }, function(res) {
    var filteredUsers;
    filteredUsers = models.generateCollection({
      collectionName: 'FilteredUsers',
      data: res.filteredUsers,
      anyChangeCb: showSettingsSaved,
      events: {
        add: function(filteredUser) {
          var el;
          el = $("<li>\n  <span class=\"screen-name\">@" + (_.escape(filteredUser.get('screenName'))) + "</span>\n  <a class=\"close\">&times;</a>\n</li>").data('model', filteredUser);
          return dom.filteredUsers.append(el);
        },
        remove: function(__, ___, opt) {
          return $(dom.filteredUsers.find('li')[opt.index]).remove();
        }
      }
    });
    dom.filteredUsers.on('click', '.close', function() {
      var el;
      el = $(this).parents('li');
      return filteredUsers.remove(el.data('model'));
    });
    return util.inputHandler(dom.filteredUserInput, function() {
      var filteredUser;
      filteredUser = new models.FilteredUser({
        screenName: dom.filteredUserInput.val()
      });
      if (!filteredUser.isValid()) {
        return;
      }
      return filteredUsers.add(filteredUser);
    });
  });

  chrome.extension.sendMessage({
    options: null
  }, function(res) {
    var checkBoxes, options;
    options = new models.Options(res.options);
    checkBoxes = {
      hideCompletely: null,
      enable: function(val) {
        return dom.optionsBox[val ? 'show' : 'hide']();
      }
    };
    _.each(checkBoxes, function(cb, attr) {
      var $el;
      $el = dom["" + attr + "Input"];
      options.on("renderAll change:" + attr, function() {
        var val;
        val = this.get(attr);
        $el.prop('checked', val);
        if (cb) {
          return cb(val);
        }
      });
      return $el.change(function() {
        return options.set(attr, $el.prop('checked'));
      });
    });
    options.trigger('renderAll');
    return options.on('change', function() {
      util.saveToBg('options', options);
      return showSettingsSaved();
    });
  });

  $('[data-toggle="tooltip"]').tooltip();

}).call(this);
