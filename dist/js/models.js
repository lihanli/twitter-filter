// Generated by CoffeeScript 1.6.3
(function() {
  window.models = {
    TwitterUser: Backbone.Model.extend({
      initialize: function() {
        return this.set({
          screenName: models.TwitterUser.sanitizeScreenName(this.get('screenName'))
        });
      },
      validate: function() {
        var msg;
        msg = models.validations.presence.call(this, 'screenName');
        if (msg) {
          return msg;
        }
      }
    }),
    TwitterUsers: Backbone.Collection.extend({
      model: this.TwitterUser,
      add: function() {
        if (models.checkDuplicates.call(this, 'twitterUser')) {
          return false;
        }
        return Backbone.Collection.prototype.add.apply(this, arguments);
      },
      findByScreenName: function(screenName) {
        return this.findWhere({
          screenName: models.TwitterUser.sanitizeScreenName(screenName)
        });
      }
    }),
    FilteredPhrase: Backbone.Model.extend({
      initialize: function() {
        return this.set({
          phrase: $.trim(this.get('phrase'))
        });
      },
      validate: function() {
        var msg;
        msg = models.validations.presence.call(this, 'phrase');
        if (msg) {
          return msg;
        }
      }
    }),
    FilteredPhrases: Backbone.Collection.extend({
      model: this.FilteredPhrase,
      add: function(filteredPhrase) {
        if (models.checkDuplicates('phrase')) {
          return false;
        }
        return Backbone.Collection.prototype.add.apply(this, arguments);
      }
    }),
    Options: Backbone.Model.extend({
      defaults: {
        hideCompletely: false,
        enable: true
      }
    }),
    checkDuplicates: function(attr) {
      var self;
      self = this;
      return self.any(function(model) {
        return model.get(attr) === self.get(attr);
      });
    },
    validations: {
      presence: function(attr) {
        if (util.isBlank(this.get(attr))) {
          return "" + attr + " can't be blank";
        }
        return false;
      }
    },
    generateTwitterUsers: function(opt) {
      var cb, evt, twitterUsers, _ref;
      if (opt == null) {
        opt = {};
      }
      if (opt.events == null) {
        opt.events = {};
      }
      twitterUsers = new this.TwitterUsers();
      _ref = opt.events;
      for (evt in _ref) {
        cb = _ref[evt];
        twitterUsers.on(evt, cb);
      }
      twitterUsers.add(util.convertToBackboneArr(this.TwitterUser, opt.users));
      twitterUsers.on('change reset add remove', function(__, collection) {
        util.saveToBg('filteredUsers', collection);
        if (opt.anyChangeCb) {
          return opt.anyChangeCb();
        }
      });
      return twitterUsers;
    }
  };

  models.TwitterUser.sanitizeScreenName = function(screenName) {
    return $.trim(screenName).replace(/\W/g, '').toLowerCase();
  };

}).call(this);
